" Yoinked from Astrid (github.com/ifd3f/infra)
" Refresh coc faster
set updatetime=100

let g:coc_global_extenstons = ['coc-tsserver']
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Force refresh with c-space
inoremap <silent><expr> <c-space> coc#refresh()

" CoC binds
" Partially stolen from http://0xd34df00d.me/posts/2021/10/vim-and-haskell-in-2021.html
map <Leader>RR :CocRestart<cr>

map <Leader>ggd <Plug>(coc-definition)
map <Leader>ggi <Plug>(coc-implementation)
map <Leader>ggt <Plug>(coc-type-definition)
map <Leader>gh :call CocActionAsync('doHover')<cr>
map <Leader>gn <Plug>(coc-diagnostic-next)
map <Leader>gp <Plug>(coc-diagnostic-prev)
map <Leader>gr <Plug>(coc-references)

map <Leader>rn <Plug>(coc-rename)
map <Leader>rf <Plug>(coc-refactor)
map <Leader>.. :CocFix<cr>
map <Leader>>> <Plug>(coc-fix-line)

map <Leader>al <Plug>(coc-codeaction-line)
map <Leader>ac <Plug>(coc-codeaction-cursor)
map <Leader>ao <Plug>(coc-codelens-action)

nnoremap <Leader>kd :<C-u>CocList diagnostics<Cr>
nnoremap <Leader>kc :<C-u>CocList commands<Cr>
nnoremap <Leader>ko :<C-u>CocList outline<Cr>
nnoremap <Leader>kr :<C-u>CocListResume<Cr>

" Make the floating error window easier to read for my shitty eyes
highlight CocErrorFloat ctermfg=Black guifg=#000000

" Test binds
nmap <silent> <leader>tt :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>

let maplocalleader = "\\"

" Dap settings

nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

lua << EOF
local dap_ok, dap = pcall(require, "dap")
if not (dap_ok) then
  print("nvim-dap not installed!")
  return
end

dap.adapters.haskell = {
  type = 'executable';
  command = 'haskell-debug-adapter';
  args = {'--hackage-version=0.0.33.0'};
}

local workspaceFolder = vim.fn.getcwd()
dap.configurations = {
    haskell = {
          {
            type = 'haskell';
            request = 'launch';
            name = "haskell-debug-adapter";
            program = "${file}";
            workspace = "${workspaceFolder}";
            startup = "${workspaceFolder}/test/Spec.hs";
            startupFunc = "";
            startupArgs = "";
            stopOnEntry = false;
            mainArgs = "";
            ghciPrompt = "H>>= ";
            ghciInitialPrompt = "> ";
            ghciCmd = "cabal repl --test --no-load --no-build --main-is TARGET --ghci-options -fprint-evld-with-show";
            ghciEnv = {dummy=""},
            logFile = "${workspaceFolder}/hda.log";
            logLevel = "DEBUG";
            forceInspect = false;
          }
    }
}


local ht = require('haskell-tools')
local def_opts = { noremap = true, silent = true, }
ht.start_or_attach {
  hls = {
    on_attach = function(client, bufnr)
      local opts = vim.tbl_extend('keep', def_opts, { buffer = bufnr, })
      -- haskell-language-server relies heavily on codeLenses,
      -- so auto-refresh (see advanced configuration) is enabled by default
      vim.keymap.set('n', '<space>ca', vim.lsp.codelens.run, opts)
      vim.keymap.set('n', '<space>hs', ht.hoogle.hoogle_signature, opts)
      vim.keymap.set('n', '<space>ea', ht.lsp.buf_eval_all, opts)
    end,
  },
}

-- Suggested keymaps that do not depend on haskell-language-server:
local bufnr = vim.api.nvim_get_current_buf()
-- set buffer = bufnr in ftplugin/haskell.lua
local opts = { noremap = true, silent = true, buffer = bufnr }

-- Toggle a GHCi repl for the current package
vim.keymap.set('n', '<leader>rr', ht.repl.toggle, opts)
-- Toggle a GHCi repl for the current buffer
vim.keymap.set('n', '<leader>rf', function()
  ht.repl.toggle(vim.api.nvim_buf_get_name(0))
end, def_opts)
vim.keymap.set('n', '<leader>rq', ht.repl.quit, opts)

-- Detect nvim-dap launch configurations
-- (requires nvim-dap and haskell-debug-adapter)
ht.dap.discover_configurations(bufnr)

-- Adding hoogle to telescope
local telescope = require('telescope')

telescope.load_extension('hoogle')


EOF

