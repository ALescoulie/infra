" Yoinked from Astrid (github.com/ifd3f/infra)
call plug#begin('~/.config/nvim/plugged')

" Not in pkgs.vimPlugins
Plug 'dkarter/bullets.vim' 

call plug#end()

let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \ 'scratch'
    \]

" Syntax adjustments
syntax on
filetype plugin indent on
autocmd BufNewFile,BufRead *.nvim set syntax=vim
autocmd BufNewFile,BufRead flake.lock set syntax=json
autocmd BufNewFile,BufRead coc-settings.json set syntax=jsonc

" Set colorscheme and transparency
let g:adwaita_dark = v:true
let g:adwaita_disable_cursorline = v:true
let g:adwaita_transparent = v:true
colorscheme adwaita

hi Normal guibg=NONE ctermbg=NONE
highlight LineNr term=bold gui=NONE guifg=DarkViolet guibg=NONE
highlight Comment guifg=LightBlue guibg=NONE

" Indentation settings and other stuff
set autoindent smartindent ignorecase smartcase number splitbelow
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" Per-language changes
autocmd FileType haskell,nix,yaml,json,jsonc setlocal shiftwidth=2 softtabstop=2 expandtab

" Detect indent when reading existing file
autocmd BufRead * Sleuth

" Setting the complete key to tab
inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<TAB>"
inoremap <silent><expr> <cr> "\<c-g>u\<CR>"

" Rulers for column lengths
highlight LongLineWarning ctermbg=yellow
autocmd FileType python call matchadd('LongLineWarning', '\%81v', 100)
call matchadd('LongLineWarning', '\%121v', 100)

" Enable rainbow
let g:rainbow_active = 1

" Nerdtree configs
let g:NERDTreeHijackNetrw = 1
func! Explorer()
    if !exists("g:NERDTree") 
        return
    endif

    if g:NERDTree.IsOpen()
        :NERDTreeClose
    elseif expand('%') != ''
        :NERDTreeFind
    else
        :NERDTree
    endif
endfunc
nnoremap <C-n> :call Explorer()<CR>

" Run make in a split terminal
func! MakeSplitTerm()
    exec "w"
    set splitbelow
    :sp
    :res -5
    term make
    set nonumber

    " go to end of the buffer
    :normal G
endfunc
noremap <leader>rr :call MakeSplitTerm()<CR>

lua << EOF
    -- default config
    require("image").setup({
      backend = "kitty",
      integrations = {
        markdown = {
          enabled = true,
          clear_in_insert_mode = false,
          download_remote_images = true,
          only_render_image_at_cursor = false,
          filetypes = { "markdown", "vimwiki" }, -- markdown extensions (ie. quarto) can go here
        },
        neorg = {
          enabled = true,
          clear_in_insert_mode = false,
          download_remote_images = true,
          only_render_image_at_cursor = false,
          filetypes = { "norg" },
        },
        html = {
          enabled = false,
        },
        css = {
          enabled = false,
        },
      },
      max_width = 100,
      max_height = 12,
      max_width_window_percentage = math.huge,
      max_height_window_percentage = math.huge,
      window_overlap_clear_enabled = false, -- toggles images when windows are overlapped
      window_overlap_clear_ft_ignore = { "cmp_menu", "cmp_docs", "" },
      editor_only_render_when_focused = false, -- auto show/hide images when the editor gains/looses focus
      tmux_show_only_in_active_window = false, -- auto show/hide images in the correct Tmux window (needs visual-activity off)
      hijack_file_patterns = { "*.png", "*.jpg", "*.jpeg", "*.gif", "*.webp", "*.avif" }, -- render image files as images when opened
    })
EOF
